spring.application.name=ChatGPT-integration
spring.autoconfigure.exclude=none

gpt.chat.temperature=1.0
gpt.chat.presence.penalty=1.0
gpt.chat.api.url=https://api.openai.com/v1/chat/completions
gpt.chat.qty.context.messages=2
gpt.chat.system.initial.message=Always mention user when responding. If i ask you to mention all, type <!channel> 
gpt.chat.sendrequest.retryattempts=3
gpt.chat.sendrequest.waitforretry.seconds=5

#JIRA
jira.url=https://mtroja98.atlassian.net/rest/api/3
jira.issue=/issue
jira.search=/search
jira.project.name=JAVA
jira.maxresults=10

spring.mvc.view.prefix=/WEB-INF/views/
spring.mvc.view.suffix=.jsp

logging.level.org.springframework.security=INFO
#logging.level.org.springframework.security=INFO

#Function Descriptions
gpt.function.jira.create.issue.name=createJiraIssueCall
gpt.function.jira.create.issue.description=The function creates Jira issue of the specified type (Epic, Story, Task, Bug), with the specific summary, description, due date, assignee. Remember that "returned key" is the ticket/issue ID created by Jira! Always return summary and ticket ID.
gpt.function.jira.create.issue.attr.assignee.desc=The name of the team member that should be assigned to the current work item. In case name is not provided, we can leave it blank. This is an optional attribute.
gpt.function.jira.create.issue.attr.description.desc=Contains the detailed description of the task. It can be written in different formats. In case this is a story, we need to create description in user story format "as a user I want...". In case this is a bug, the description MUST have steps to reproduce, actual and expected behavior. This is a mandatory attribute. 
gpt.function.jira.create.issue.attr.issuetype.desc=Must have one of the specified values: Epic, Story, Task, Bug. No other values are allowed. By default it is "Task", in case nothing other is provided. This is a mandatory attribute. Key must be "issuetype".
gpt.function.jira.create.issue.attr.issuetype.epic=Epic
gpt.function.jira.create.issue.attr.issuetype.story=Story
gpt.function.jira.create.issue.attr.issuetype.task=Task
gpt.function.jira.create.issue.attr.issuetype.bug=Bug
gpt.function.jira.create.issue.attr.duedate.desc=Contains the due date of the work item telling what is the latest possible date when task should be done. In other words, sets the latest date when work item should be completed, implemented and moved to the done state. For example, user can use such due dates: "by end of the week", "by end of the month", "by end of the year", "by September 14th, 2023", "by September 14th", "should be implemented till March 12th", etc. And it is required that ChatGPT would recognize the referene to the due date and convert it to the following the format "yyyy-MM-dd".
gpt.function.jira.create.issue.attr.summary.format=yyyy-MM-dd
gpt.function.jira.create.issue.attr.summary.desc=Short description of work item. Should give clear understanding of what this work item is about. This is a mandatory attribute. 

gpt.function.gmail.send.email.name=sendEmailFunction
gpt.function.gmail.send.email.description=The function sends email with the configured subject, and content to the specified email address. 
gpt.function.gmail.send.email.attr.addressee.email.desc=The email address of the addressee. The email address where we want to send email to. The email should meet the requirements of RFC 5322 standard.
gpt.function.gmail.send.email.attr.addressee.name.desc=The first name and last name of the addressee. For example: "send email to John Smith". The addressee name from this field will be used to find an email. 
gpt.function.gmail.send.email.attr.content.desc=The content of the email. Should be inserted as a body of the email.
gpt.function.gmail.send.email.attr.subject.desc=The subject of the email.

## HIBERNATE
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=update
#none – tells Hibernate not to manage schema at all (recommended for production).
#update – useful in dev mode to auto-update schema.
#validate – verifies schema matches but doesnt change it.
#create/create-drop – used to generate schema at startup.

spring.jpa.show-sql=false
logging.level.org.hibernate.SQL=ERROR
logging.level.org.hibernate.type.descriptor.sql=ERROR
logging.level.org.hibernate.orm.jdbc.bind=ERROR

spring.main.banner-mode=console
logging.level.root=INFO
#logging.level.org.springframework.boot.context.logging.DeferredLog=OFF

# GITHUB

github.api.url=https://api.github.com
github.function.desc=Function to get data about user's public github repositories, branches, commits
github.function.name=getReposFunctionCall
github.function.attr.login=login
github.function.attr.login.desc=User's github account login (username). Return string only, no JSON syntax

springdoc.swagger-ui.path=/swagger
springdoc.api-docs.enabled=true
springdoc.swagger-ui.enabled=true

### Task-System

## Create issue
gpt.function.tasksystem.create.issue.name=createTaskSystemIssueFunction
gpt.function.tasksystem.create.issue.description=The function creates Task-System issue, with the specific Title, description, Priority, AuthorId, AssigneeId, DueDate, ProjectId. Remember that "returned key" is the ticket/issue ID created by Task-System! Always return ticket key.
gpt.function.tasksystem.create.issue.attr.title.desc=Title of the issue.
gpt.function.tasksystem.create.issue.attr.description.desc=Contains the detailed description of the task. It can be written in different formats. In case this is a story, we need to create description in user story format "as a user I want...". In case this is a bug, the description MUST have steps to reproduce, actual and expected behavior. This is a mandatory attribute. 
gpt.function.tasksystem.create.issue.attr.priority.desc=Priority String: LOW, NORMAL, HIGH, CRITICAL
gpt.function.tasksystem.create.issue.attr.authorslackid.desc=Creator of the issue = "user" who sent the message. Always contains 11 chars and starts with 'U' char
gpt.function.tasksystem.create.issue.attr.assigneeslackid.desc=SlackId of user who should be assigned to a ticket. if not deined, then author.
gpt.function.tasksystem.create.issue.attr.duedate.desc=Contains the due date of the work item telling what is the latest possible date when task should be done. In other words, sets the latest date when work item should be completed, implemented and moved to the done state. For example, user can use such due dates: "by end of the week", "by end of the month", "by end of the year", "by September 14th, 2023", "by September 14th", "should be implemented till March 12th", etc. And it is required that ChatGPT would recognize the referene to the due date and convert it to the following the format "yyyy-MM-dd".
gpt.function.tasksystem.create.issue.attr.projectid.desc=Every issue must have integer project ID assigned. If not defined, type 1.
gpt.function.tasksystem.create.issue.attr.duedate.format=Example "2025-10-22"
